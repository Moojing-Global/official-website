---
import { Icon } from "astro-icon/components";

export interface DropdownItem {
    title: string;
    path: string;
    description?: string;
}

interface Props {
    title: string;
    path: string;
    items: DropdownItem[];
    viewAllText?: string;
    currentPath?: string;
    class?: string;
}

const { title, path, items, viewAllText, currentPath = "/", class: className } = Astro.props;

// Use custom viewAllText or fallback to "View All {title}"
const viewAllLabel = viewAllText || `View All ${title}`;

// Check if any child is active
const hasActiveChild = items.some((item) => currentPath === item.path);
const isParentActive = currentPath === path;
const isActive = isParentActive || hasActiveChild;
---

<div class="relative" data-dropdown>
    <button
        type="button"
        class={`hover:text-foreground focus-visible:text-foreground focus-visible:ring-outline flex items-center gap-1 rounded-md px-2 py-1 text-base font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 ${
            isActive ? "text-foreground" : "text-muted-foreground"
        } ${className || ""}`}
        aria-expanded="false"
        aria-haspopup="true"
        data-dropdown-trigger
    >
        {title}
        <Icon name="tabler:chevron-down" class="h-4 w-4 transition-transform" />
    </button>

    <!-- Dropdown Menu -->
    <div
        class="bg-card border-border absolute top-full left-0 z-50 mt-2 hidden min-w-[240px] rounded-md border py-2 shadow-lg"
        data-dropdown-menu
        role="menu"
        aria-label={`${title} menu`}
    >
        <!-- Parent Link as First Item -->
        <a
            href={path}
            class="hover:bg-muted text-foreground focus:bg-accent focus:text-accent-foreground block px-4 py-2.5 text-sm font-medium transition-colors focus:outline-none"
            role="menuitem"
            tabindex="-1"
        >
            {viewAllLabel}
        </a>
        <div class="border-border my-1 border-t"></div>

        <!-- Child Items -->
        {
            items.map((item) => {
                const isItemActive = currentPath === item.path;
                return (
                    <a
                        href={item.path}
                        class={`hover:bg-muted focus:bg-accent focus:text-accent-foreground block px-4 py-2 transition-colors focus:outline-none ${
                            isItemActive
                                ? "bg-muted text-foreground"
                                : "text-muted-foreground hover:text-foreground"
                        }`}
                        role="menuitem"
                        tabindex="-1"
                        aria-current={isItemActive ? "page" : undefined}
                    >
                        <div class="text-sm font-medium">{item.title}</div>
                        {item.description && (
                            <div class="text-muted-foreground mt-0.5 text-xs">
                                {item.description}
                            </div>
                        )}
                    </a>
                );
            })
        }
    </div>
</div>

<script>
    // Dropdown functionality with full keyboard accessibility
    function initDropdowns() {
        const dropdowns = document.querySelectorAll("[data-dropdown]");

        dropdowns.forEach((dropdown) => {
            const trigger = dropdown.querySelector(
                "[data-dropdown-trigger]",
            ) as HTMLButtonElement;
            const menu = dropdown.querySelector(
                "[data-dropdown-menu]",
            ) as HTMLElement;
            const menuItems = menu.querySelectorAll(
                '[role="menuitem"]',
            ) as NodeListOf<HTMLAnchorElement>;
            const chevron = trigger.querySelector("svg") as SVGElement;

            let currentIndex = -1;

            // Toggle dropdown
            function toggle(show?: boolean) {
                const isOpen =
                    show !== undefined
                        ? show
                        : menu.classList.contains("hidden");

                if (isOpen) {
                    // Close all other dropdowns before opening this one
                    document.dispatchEvent(
                        new CustomEvent("dropdown:close", {
                            detail: { exclude: dropdown },
                        }),
                    );

                    menu.classList.remove("hidden");
                    trigger.setAttribute("aria-expanded", "true");
                    chevron?.classList.add("rotate-180");
                    currentIndex = -1;
                    // Focus first item on open
                    menuItems[0]?.focus();
                } else {
                    menu.classList.add("hidden");
                    trigger.setAttribute("aria-expanded", "false");
                    chevron?.classList.remove("rotate-180");
                    currentIndex = -1;
                }
            }

            // Listen for close event from other dropdowns
            document.addEventListener("dropdown:close", (e: Event) => {
                const customEvent = e as CustomEvent;
                if (customEvent.detail?.exclude !== dropdown) {
                    // Close this dropdown if it's not the one being opened
                    if (!menu.classList.contains("hidden")) {
                        menu.classList.add("hidden");
                        trigger.setAttribute("aria-expanded", "false");
                        chevron?.classList.remove("rotate-180");
                        currentIndex = -1;
                    }
                }
            });

            // Click to toggle
            trigger.addEventListener("click", (e) => {
                e.preventDefault();
                e.stopPropagation();
                toggle();
            });

            // Keyboard navigation on trigger
            trigger.addEventListener("keydown", (e) => {
                if (e.key === "Enter" || e.key === " ") {
                    e.preventDefault();
                    toggle();
                } else if (e.key === "ArrowDown") {
                    e.preventDefault();
                    toggle(true);
                }
            });

            // Keyboard navigation in menu
            menu.addEventListener("keydown", (e) => {
                if (e.key === "Escape") {
                    e.preventDefault();
                    toggle(false);
                    trigger.focus();
                } else if (e.key === "ArrowDown") {
                    e.preventDefault();
                    currentIndex = Math.min(
                        currentIndex + 1,
                        menuItems.length - 1,
                    );
                    menuItems[currentIndex]?.focus();
                } else if (e.key === "ArrowUp") {
                    e.preventDefault();
                    currentIndex = Math.max(currentIndex - 1, 0);
                    menuItems[currentIndex]?.focus();
                } else if (e.key === "Home") {
                    e.preventDefault();
                    currentIndex = 0;
                    menuItems[0]?.focus();
                } else if (e.key === "End") {
                    e.preventDefault();
                    currentIndex = menuItems.length - 1;
                    menuItems[currentIndex]?.focus();
                }
            });

            // Update current index when focusing items
            menuItems.forEach((item, index) => {
                item.addEventListener("focus", () => {
                    currentIndex = index;
                });
            });

            // Close on click outside
            document.addEventListener("click", (e) => {
                if (!dropdown.contains(e.target as Node)) {
                    toggle(false);
                }
            });
        });
    }

    // Initialize on load
    initDropdowns();

    // Re-initialize on navigation (for Astro view transitions)
    document.addEventListener("astro:page-load", initDropdowns);
</script>
