---
import { getNavItems, isDropdown, getActionButtons } from "../utils/navigation";
import { Button } from "@components/starwind/button";
import { Dropdown } from "@components/starwind/dropdown";
import { Icon } from "astro-icon/components";

interface Props {
    currentPath?: string;
}

const { currentPath = "/" } = Astro.props;
const navItems = getNavItems();
const actionButtons = getActionButtons();

// Normalize paths for comparison
const normalizedCurrentPath = currentPath === "" ? "/" : currentPath;
---

<nav
    id="navbar"
    class="border-border bg-background/95 supports-[backdrop-filter]:bg-background/60 fixed top-0 z-50 w-full border-b backdrop-blur transition-transform duration-300"
    aria-label="Main navigation"
>
    <!-- Desktop: layout -->
    <div
        class="container mx-auto hidden h-16 max-w-7xl items-center px-4 lg:flex"
    >
        <!-- Left: Logo -->
        <div class="flex w-full items-center">
            <a href="/" class="flex items-center gap-2" aria-label="Home">
                <picture class="dark:hidden">
                    <source
                        srcset="/brand/MooJing_Wordmark.webp"
                        type="image/webp"
                    />
                    <img
                        src="/brand/MooJing_Wordmark.png"
                        alt="MooJing Logo"
                        class="h-10 w-auto"
                    />
                </picture>
                <picture class="hidden dark:block">
                    <source
                        srcset="/brand/MooJing_Wordmark_White.webp"
                        type="image/webp"
                    />
                    <img
                        src="/brand/MooJing_Wordmark_White.png"
                        alt="MooJing Logo"
                        class="h-10 w-auto"
                    />
                </picture>
            </a>
        </div>

        <!-- Center: Navigation -->
        <div class="flex w-full items-center justify-center gap-4">
            {
                navItems.map((item) => {
                    if (isDropdown(item)) {
                        return (
                            <Dropdown
                                title={item.title}
                                path={item.path}
                                items={item.children!}
                                viewAllText={item.viewAllText}
                                currentPath={normalizedCurrentPath}
                                class="!px-0"
                            />
                        );
                    } else {
                        const isActive = normalizedCurrentPath === item.path;
                        return (
                            <a
                                href={item.path}
                                class={`hover:text-foreground text-base font-medium transition-colors ${
                                    isActive
                                        ? "text-foreground"
                                        : "text-muted-foreground"
                                }`}
                                aria-current={isActive ? "page" : undefined}
                            >
                                {item.title}
                            </a>
                        );
                    }
                })
            }
        </div>

        <!-- Right: Action Buttons -->
        <div class="flex w-full items-center justify-end gap-3">
            <button
                id="theme-toggle-desktop"
                class="text-foreground hover:bg-muted focus-visible:ring-outline flex items-center justify-center rounded-md p-2 focus-visible:ring-2 focus-visible:outline-none"
                aria-label="Toggle theme"
            >
                <Icon name="tabler:sun" class="h-5 w-5 dark:hidden" />
                <Icon name="tabler:moon" class="hidden h-5 w-5 dark:block" />
            </button>
            {
                actionButtons.map((button) => (
                    <Button
                        href={button.path}
                        variant={button.variant || "default"}
                        size="md"
                    >
                        {button.icon && <Icon name={button.icon} />}
                        {button.label}
                    </Button>
                ))
            }
        </div>
    </div>

    <!-- Mobile: Flex layout -->
    <div
        class="container mx-auto flex h-16 max-w-7xl items-center justify-between px-4 lg:hidden"
    >
        <!-- Logo -->
        <a href="/" class="flex items-center gap-2" aria-label="Home">
            <picture class="dark:hidden">
                <source
                    srcset="/brand/MooJing_Wordmark.webp"
                    type="image/webp"
                />
                <img
                    src="/brand/MooJing_Wordmark.png"
                    alt="MooJing Logo"
                    class="h-10 w-auto"
                />
            </picture>
            <picture class="hidden dark:block">
                <source
                    srcset="/brand/MooJing_Wordmark_White.webp"
                    type="image/webp"
                />
                <img
                    src="/brand/MooJing_Wordmark_White.png"
                    alt="MooJing Logo"
                    class="h-10 w-auto"
                />
            </picture>
        </a>

        <!-- Mobile Buttons (Theme Toggle + Menu) -->
        <div class="flex items-center gap-2">
            <button
                id="theme-toggle-mobile"
                class="text-foreground hover:bg-muted focus-visible:ring-outline flex items-center justify-center rounded-md p-2 focus-visible:ring-2 focus-visible:outline-none"
                aria-label="Toggle theme"
            >
                <Icon name="tabler:sun" class="h-5 w-5 dark:hidden" />
                <Icon name="tabler:moon" class="hidden h-5 w-5 dark:block" />
            </button>
            <button
                id="mobile-menu-button"
                class="text-foreground hover:bg-muted focus-visible:ring-outline flex items-center justify-center rounded-md p-2 focus-visible:ring-2 focus-visible:outline-none"
                aria-label="Toggle menu"
                aria-expanded="false"
                aria-controls="mobile-menu"
            >
                <Icon
                    name="tabler:menu-2"
                    class="h-6 w-6"
                    id="menu-icon-open"
                />
                <Icon
                    name="tabler:x"
                    class="hidden h-6 w-6"
                    id="menu-icon-close"
                />
            </button>
        </div>
    </div>

    <!-- Mobile Menu -->
    <div
        id="mobile-menu"
        class="border-border bg-background hidden border-t md:hidden"
        role="dialog"
        aria-modal="true"
    >
        <div class="container mx-auto space-y-1 px-4 py-4">
            {
                navItems.map((item) => {
                    if (isDropdown(item)) {
                        // Mobile dropdown - expanded section
                        return (
                            <div class="space-y-1">
                                <div class="text-foreground px-3 py-2 text-sm font-semibold">
                                    {item.title}
                                </div>
                                <a
                                    href={item.path}
                                    class={`hover:bg-muted block rounded-md px-3 py-2 pl-6 text-sm transition-colors ${
                                        normalizedCurrentPath === item.path
                                            ? "bg-muted text-foreground"
                                            : "text-muted-foreground"
                                    }`}
                                >
                                    View All
                                </a>
                                {item.children!.map((child) => {
                                    const isChildActive =
                                        normalizedCurrentPath === child.path;
                                    return (
                                        <a
                                            href={child.path}
                                            class={`hover:bg-muted block rounded-md px-3 py-2 pl-6 text-sm transition-colors ${
                                                isChildActive
                                                    ? "bg-muted text-foreground"
                                                    : "text-muted-foreground"
                                            }`}
                                            aria-current={
                                                isChildActive
                                                    ? "page"
                                                    : undefined
                                            }
                                        >
                                            {child.title}
                                        </a>
                                    );
                                })}
                            </div>
                        );
                    } else {
                        const isActive = normalizedCurrentPath === item.path;
                        return (
                            <a
                                href={item.path}
                                class={`hover:bg-muted block rounded-md px-3 py-2 text-base font-medium transition-colors ${
                                    isActive
                                        ? "bg-muted text-foreground"
                                        : "text-muted-foreground"
                                }`}
                                aria-current={isActive ? "page" : undefined}
                            >
                                {item.title}
                            </a>
                        );
                    }
                })
            }
            <div class="flex flex-col gap-2 pt-4">
                {
                    actionButtons.map((button) => (
                        <Button
                            href={button.path}
                            variant={button.variant || "default"}
                            size="md"
                            class="w-full"
                        >
                            {button.icon && <Icon name={button.icon} />}
                            {button.label}
                        </Button>
                    ))
                }
            </div>
        </div>
    </div>
</nav>

<script>
    // Theme toggle functionality
    function toggleTheme() {
        const html = document.documentElement;
        const currentTheme = html.classList.contains("dark") ? "dark" : "light";
        const newTheme = currentTheme === "dark" ? "light" : "dark";

        if (newTheme === "dark") {
            html.classList.add("dark");
        } else {
            html.classList.remove("dark");
        }

        localStorage.setItem("theme", newTheme);
    }

    // Attach theme toggle to both desktop and mobile buttons
    const themeToggleDesktop = document.getElementById("theme-toggle-desktop");
    const themeToggleMobile = document.getElementById("theme-toggle-mobile");

    themeToggleDesktop?.addEventListener("click", toggleTheme);
    themeToggleMobile?.addEventListener("click", toggleTheme);

    // Mobile menu toggle
    const menuButton = document.getElementById("mobile-menu-button");
    const mobileMenu = document.getElementById("mobile-menu");
    const menuIconOpen = document.getElementById("menu-icon-open");
    const menuIconClose = document.getElementById("menu-icon-close");

    menuButton?.addEventListener("click", () => {
        const isExpanded = menuButton.getAttribute("aria-expanded") === "true";

        // Toggle menu visibility
        mobileMenu?.classList.toggle("hidden");

        // Toggle icons
        menuIconOpen?.classList.toggle("hidden");
        menuIconClose?.classList.toggle("hidden");

        // Update aria-expanded
        menuButton.setAttribute("aria-expanded", String(!isExpanded));
    });

    // Close mobile menu when clicking outside
    document.addEventListener("click", (event) => {
        const target = event.target as HTMLElement;
        if (
            !menuButton?.contains(target) &&
            !mobileMenu?.contains(target) &&
            !mobileMenu?.classList.contains("hidden")
        ) {
            mobileMenu?.classList.add("hidden");
            menuIconOpen?.classList.remove("hidden");
            menuIconClose?.classList.add("hidden");
            menuButton?.setAttribute("aria-expanded", "false");
        }
    });

    // Close mobile menu on escape key
    document.addEventListener("keydown", (event) => {
        if (
            event.key === "Escape" &&
            !mobileMenu?.classList.contains("hidden")
        ) {
            mobileMenu?.classList.add("hidden");
            menuIconOpen?.classList.remove("hidden");
            menuIconClose?.classList.add("hidden");
            menuButton?.setAttribute("aria-expanded", "false");
            menuButton?.focus();
        }
    });

    // Navbar show/hide on scroll
    let lastScrollY = window.scrollY;
    let ticking = false;

    function updateNavbar() {
        const navbar = document.getElementById("navbar");
        const currentScrollY = window.scrollY;

        if (!navbar) return;

        // Show navbar when scrolling up or at top of page
        if (currentScrollY < lastScrollY || currentScrollY < 10) {
            navbar.style.transform = "translateY(0)";
        }
        // Hide navbar when scrolling down (and not at top)
        else if (currentScrollY > lastScrollY && currentScrollY > 100) {
            navbar.style.transform = "translateY(-100%)";
        }

        lastScrollY = currentScrollY;
        ticking = false;
    }

    // Use requestAnimationFrame for better performance
    window.addEventListener("scroll", () => {
        if (!ticking) {
            window.requestAnimationFrame(updateNavbar);
            ticking = true;
        }
    });
</script>
